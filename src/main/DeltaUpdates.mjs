import Base             from '../core/Base.mjs';
import DomAccess        from './DomAccess.mjs';
import {voidAttributes} from '../vdom/domConstants.mjs';

const NeoConfig = Neo.config;

/**
 * Manages and applies the Virtual DOM (VDom) delta updates generated by `Neo.vdom.Helper` to the real browser DOM.
 * This class acts as the bridge between the VDom worker's calculated changes and the actual rendering on the main thread.
 * It orchestrates various DOM manipulation operations such as node insertions, removals, moves, attribute updates,
 * and handles dynamic renderer switching based on `Neo.config.useDomApiRenderer`.
 *
 * As a singleton per browser window, it provides a centralized and efficient mechanism for synchronized DOM updates,
 * ensuring the UI accurately reflects the application state.
 * @class Neo.main.DeltaUpdates
 * @extends Neo.core.Base
 * @singleton
 */
class DeltaUpdates extends Base {
    static config = {
        /**
         * @member {String} className='Neo.main.DeltaUpdates'
         * @protected
         */
        className: 'Neo.main.DeltaUpdates',
        /**
         * @member {Number} countDeltas=0
         * @protected
         */
        countDeltas: 0,
        /**
         * @member {Number} countDeltasPer250ms=0
         * @protected
         */
        countDeltasPer250ms: 0,
        /**
         * @member {Number} countUpdates=0
         * @protected
         */
        countUpdates: 0,
        /**
         * @member {Boolean} renderCountDeltas_=false
         * @protected
         * @reactive
         */
        renderCountDeltas_: false,
        /**
         * @member {Boolean} singleton=true
         */
        singleton: true
    }

    /**
     * @member {Number} logDeltasIntervalId=0
     * @protected
     */
    logDeltasIntervalId = 0

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let {environment} = NeoConfig;

        if (NeoConfig.renderCountDeltas) {
            this.renderCountDeltas = true
        }

        // We need different publicPath values for the main thread inside the webpack based dist envs,
        // depending on the hierarchy level of the app entry point
        if (environment === 'dist/development' || environment === 'dist/production') {
            __webpack_require__.p = NeoConfig.basePath.substring(6)
        }
    }

    /**
     * Triggered after the renderCountDeltas config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetRenderCountDeltas(value, oldValue) {
        let me                    = this,
            {logDeltasIntervalId} = me,
            node;

        if (value) {
            if (logDeltasIntervalId === 0) {
                me.logDeltasIntervalId = setInterval(() => {
                    node = document.getElementById('neo-delta-updates');

                    if (node) {
                        node.innerHTML = String(me.countDeltasPer250ms * 4)
                    }

                    me.countDeltasPer250ms = 0
                }, 250)
            }
        } else {
            logDeltasIntervalId && clearInterval(logDeltasIntervalId);
            me.logDeltasInterval = 0
        }
    }

    /**
     * Changes the tag name (nodeName) of an existing HTMLElement in the DOM.
     * This operation is performed by creating a new HTML element with the desired `nodeName`,
     * meticulously copying all attributes and the `innerHTML` from the original `node` to the new one,
     * and then seamlessly replacing the original `node` with the newly created element within its parent.
     *
     * @param {HTMLElement} node     The existing DOM HTMLElement whose tag name needs to be changed.
     * @param {String}      nodeName The new tag name (e.g., 'div', 'span', 'p') for the element.
     */
    changeNodeName(node, nodeName) {
        let {attributes} = node,
            clone        = document.createElement(nodeName),
            i            = 0,
            len          = attributes.length,
            attribute;

        if (node) {
            for (; i < len; i++) {
                attribute = attributes.item(i);
                clone.setAttribute(attribute.nodeName, attribute.nodeValue)
            }

            clone.innerHTML= node.innerHTML;

            node.parentNode.replaceChild(clone, node)
        }
    }

    /**
     * @param {Object} delta
     * @param {String} delta.id
     */
    focusNode({id}) {
        DomAccess.getElement(id)?.focus()
    }

    /**
     * Imports either (if not already imported):
     * `Neo.main.render.DomApiRenderer`      if Neo.config.useDomApiRenderer === true
     * `Neo.main.render.StringBasedRenderer` if Neo.config.useDomApiRenderer === false
     * @returns {Promise<void>}
     * @protected
     */
    async importRenderer() {
        const {render} = Neo.main;

        if (NeoConfig.useDomApiRenderer) {
            if (!render?.DomApiRenderer) {
                await import('./render/DomApiRenderer.mjs')
            }
        } else {
            if (!render?.StringBasedRenderer) {
                await import('./render/StringBasedRenderer.mjs')
            }
        }
    }

    /**
     * @returns {Promise<void>}
     */
    async initAsync() {
        super.initAsync();

        let me = this;

        // Subscribe to global Neo.config changes for dynamic renderer switching.
        Neo.worker.Manager.on({
            neoConfigChange: me.onNeoConfigChange,
            scope          : me
        });

        await me.importRenderer()
    }

    /**
     * Inserts a new node into the DOM tree based on delta updates.
     * This method handles both string-based (outerHTML) and direct DOM API (vnode) mounting.
     * It ensures the node is inserted at the correct index within the parent.
     * This method is synchronous and *expects* the appropriate renderer (DomApiRenderer or StringBasedRenderer) to be already loaded.
     *
     * @param {Object}         delta
     * @param {Boolean}        delta.hasLeadingTextChildren Flag to honor leading comments, which require special treatment.
     * @param {Number}         delta.index                  The index at which to insert the new node within its parent.
     * @param {String}         [delta.outerHTML]            The string representation of the new node (for string-based mounting).
     * @param {String}         delta.parentId               The ID of the parent DOM node.
     * @param {Neo.vdom.VNode} [delta.vnode]                The VNode representation of the new node (for direct DOM API mounting).
     */
    insertNode({hasLeadingTextChildren, index, outerHTML, parentId, vnode}) {
        this.checkRendererAvailability();

        let {render}   = Neo.main,
            parentNode = DomAccess.getElementOrBody(parentId);

        if (parentNode) {
            if (NeoConfig.useDomApiRenderer) {
                render.DomApiRenderer.createDomTree({index, isRoot: true, parentNode, vnode})
            } else {
                render.StringBasedRenderer.insertNodeAsString({hasLeadingTextChildren, index, outerHTML, parentNode})
            }
        }
    }

    /**
     *
     */
    checkRendererAvailability() {
        const {render} = Neo.main;

        if (NeoConfig.useDomApiRenderer) {
            if (!render?.DomApiRenderer) {
                throw new Error('Neo.main.DeltaUpdates: DomApiRenderer is not loaded yet!')
            }
        } else {
            if (!render?.StringBasedRenderer) {
                throw new Error('Neo.main.DeltaUpdates: StringBasedRenderer is not loaded yet!')
            }
        }
    }

    /**
     * Moves an existing DOM node to a new position within its parent or to a new parent.
     * This method directly manipulates the DOM using the pre-calculated physical index,
     * accounting for potential text nodes wrapped in comments.
     * It performs a direct sibling swap when an element is immediately followed by its target position,
     * which is necessary to prevent attempting to replace a node with itself.
     *
     * @param {Object} delta
     * @param {String} delta.id       The ID of the DOM node to move.
     * @param {Number} delta.index    The physical index at which to insert the node within the target parent's childNodes.
     * @param {String} delta.parentId The ID of the target parent DOM node.
     */
    moveNode({id, index, parentId}) {
        let node       = DomAccess.getElement(id),
            parentNode = DomAccess.getElement(parentId);

        if (node && parentNode) {
            // If the target index is at or beyond the end of the parent's current childNodes, append the node.
            if (index >= parentNode.childNodes.length) {
                parentNode.appendChild(node)
            } else {
                // Get the reference node at the target physical index.
                let referenceNode = parentNode.childNodes[index];

                // Only proceed if the node is not already at its target position.
                if (node !== referenceNode) {
                    // Perform a direct swap operation if immediate element siblings.
                    if (node.nodeType === 1 && node === referenceNode.nextElementSibling) {
                        node.replaceWith(referenceNode)
                    }

                    parentNode.insertBefore(node, referenceNode)
                }
            }
        }
    }

    /**
     * Handler for global Neo.config changes.
     * If the `Neo.config.useDomApiRenderer` value changes, this method dynamically loads the renderer.
     * @param {Object} config
     * @return {Promise<void>}
     */
    async onNeoConfigChange(config) {
        if (Object.hasOwn(config, 'useDomApiRenderer')) {
            await this.importRenderer()
        }
    }

    /**
     * Clears all child nodes of a given parent DOM node.
     * This is achieved by setting its `innerHTML` property to an empty string,
     * which is generally considered the fastest and most efficient way to remove
     * all children from a DOM element in modern browsers.
     *
     * @param {Object} delta
     * @param {String} delta.parentId The ID of the parent DOM node whose children will be removed.
     */
    removeAll({parentId}) {
        let node = DomAccess.getElement(parentId);

        if (node) {
            node.innerHTML = ''
        }
    }

    /**
     * Removes a DOM node from its parent.
     * This method handles both standard HTML elements and virtual text nodes,
     * which are typically wrapped within comment nodes in the DOM.
     *
     * @param {Object} delta
     * @param {String} delta.id       The ID of the DOM node to remove.
     * @param {String} delta.parentId The ID of the parent DOM node (required for text node removal).
     */
    removeNode({id, parentId}) {
        const node = DomAccess.getElement(id);

        if (node) {
            node.remove();
        }
        // Potentially a vtype: 'text' node (wrapped between 2 comments)
        else if (parentId) {
            const
                parentNode = DomAccess.getElementOrBody(parentId),
                isComment  = Node.COMMENT_NODE;

            if (parentNode) {
                // Find the starting comment node using its id marker
                const startComment = Array.from(parentNode.childNodes).find(n =>
                    n.nodeType === isComment && n.nodeValue.includes(` ${id} `)
                );

                if (startComment) {
                    const
                        textNode = startComment.nextSibling,
                        // Ensure endComment is a comment node before attempting to remove
                        endComment = textNode?.nextSibling?.nodeType === isComment ? textNode.nextSibling : null;

                    // Remove the three parts: start comment, text node, end comment
                    startComment.remove();
                    textNode?.remove();
                    endComment?.remove()
                }
            }
        }
    }

    /**
     * Replaces an existing child DOM node (`fromId`) with a new DOM node (`toId`)
     * within a specified parent DOM node (`parentId`).
     * This operation directly invokes the native `Node.replaceChild()` API,
     * performing an atomic swap of the elements in the DOM tree.
     * It is typically used when a specific DOM element needs to be completely
     * exchanged for a different one at the same position.
     *
     * @param {Object} delta
     * @param {String} delta.fromId   The ID of the existing child DOM node to be replaced.
     * @param {String} delta.parentId The ID of the parent DOM node containing the child to be replaced.
     * @param {String} delta.toId     The ID of the new DOM node that will replace the old one.
     */
    replaceChild({fromId, parentId, toId}) {
        let node = DomAccess.getElement(parentId);

        node?.replaceChild(DomAccess.getElement(toId), DomAccess.getElement(fromId))
    }

    /**
     * Updates various properties of an existing DOM node based on the provided delta.
     * This includes updating attributes, class names, inner HTML, node name, and inline styles.
     * It handles specific cases for attribute types (e.g., boolean attributes, 'value')
     * and style properties (e.g., '!important').
     *
     * @param {Object} delta
     * @param {String} delta.id            The ID of the DOM node to update.
     * @param {Object} [delta.attributes]  An object containing attribute key-value pairs to update or remove (if value is null/empty).
     * @param {Object} [delta.cls]         An object containing 'add' and/or 'remove' arrays for CSS classes.
     * @param {String} [delta.innerHTML]   The new inner HTML content for the node.
     * @param {String} [delta.nodeName]    The new tag name for the node (will trigger a node replacement).
     * @param {String} [delta.outerHTML]   The new outer HTML content for the node (will trigger a node replacement).
     * @param {Object} [delta.style]       An object containing CSS style properties to update. Values can include '!important'.
     * @param {String} [delta.textContent] The new text content for the node (replaces innerHTML if present).
     */
    updateNode(delta) {
        let me   = this,
            node = DomAccess.getElementOrBody(delta.id);

        if (node) {
            Object.entries(delta).forEach(([prop, value]) => {
                switch (prop) {
                    case 'attributes':
                        Object.entries(value).forEach(([key, val]) => {
                            if (voidAttributes.has(key)) {
                                node[key] = val === 'true' // vnode attribute values get converted into strings
                            } else if (val === null || val === '') {
                                if (key === 'value') {
                                    node[key] = '' // input fields => pseudo attribute can not be removed
                                } else {
                                    node.removeAttribute(key)
                                }
                            } else if (key === 'id') {
                                node[NeoConfig.useDomIds ? 'id' : 'data-neo-id'] = val
                            } else if (key === 'spellcheck' && val === 'false') {
                                // see https://github.com/neomjs/neo/issues/1922
                                node[key] = false
                            } else {
                                if (key === 'value') {
                                    node[key] = val
                                } else {
                                    node.setAttribute(key, val)
                                }
                            }
                        });
                        break
                    case 'cls':
                        value.add    && node.classList.add(...value.add);
                        value.remove && node.classList.remove(...value.remove);
                        break
                    case 'innerHTML':
                        node.innerHTML = value || '';
                        break
                    case 'nodeName':
                        me.changeNodeName(node, value);
                        break
                    case 'outerHTML':
                        node.outerHTML = value || '';
                        break
                    case 'style':
                        if (Neo.isObject(value)) {
                            Object.entries(value).forEach(([key, val]) => {
                                let important;

                                if (Neo.isString(val) && val.includes('!important')) {
                                    val = val.replace('!important', '').trim();
                                    important = 'important'
                                }

                                node.style.setProperty(Neo.decamel(key), val, important)
                            })
                        }
                        break
                    case 'textContent':
                        node.textContent = value;
                        break
                }
            })
        }
    }

    /**
     * Updates the text content of a virtual text node within the DOM.
     * Virtual text nodes are rendered within the DOM as a pair of HTML comments,
     * with their content embedded between them. This method locates the specific
     * text node by its ID (embedded in the start comment tag) within its parent's
     * innerHTML and replaces its content using a regular expression.
     *
     * @param {Object} delta
     * @param {String} delta.id       The unique ID of the virtual text node, which is embedded in its opening comment tag.
     * @param {String} delta.parentId The ID of the parent DOM node whose `innerHTML` contains the virtual text node.
     * @param {String} delta.value    The new text content to be applied to the virtual text node.
     */
    updateVtext({id, parentId, value}) {
        let node      = DomAccess.getElement(parentId),
            innerHTML = node.innerHTML,
            startTag  = `<!-- ${id} -->`,
            reg       = new RegExp(startTag + '[\\s\\S]*?<!-- \/neo-vtext -->');

        node.innerHTML = innerHTML.replace(reg, value)
    }

    /**
     * Applies a set of VDom delta updates to the real DOM.
     * This method is the core entry point for rendering changes initiated from the VDom worker.
     * It iterates through the provided deltas and dispatches them to specific DOM manipulation
     * methods (e.g., insertNode, removeNode, updateNode) based on their `action` property.
     * This method expects the appropriate renderer (DomApiRenderer or StringBasedRenderer)
     * to be loaded based on `Neo.config.useDomApiRenderer`.
     *
     * @param {Object} data
     * @param {Object|Object[]} data.deltas An array of delta objects, or a single delta object,
     * representing changes to be applied to the DOM.
     * Each delta object contains an `action` property
     * (e.g., 'insertNode', 'removeNode', 'updateNode', 'moveNode')
     * and additional properties relevant to the specific action.
     * @param {String} data.id             The unique ID of the request, used for sending a reply back to the origin.
     * @param {String} [data.origin='app'] The origin of the message (e.g., 'app'), used for sending replies.
     */
    update(data) {
        this.checkRendererAvailability();

        let me       = this,
            {deltas} = data,
            i        = 0,
            len;

        deltas = Array.isArray(deltas) ? deltas : [deltas];
        len    = deltas.length;

        if (NeoConfig.logDeltaUpdates && len > 0) {
            me.countDeltas += len;
            me.countUpdates++;
            console.log('update ' + me.countUpdates, 'total deltas ', me.countDeltas, Neo.clone(data, true))
        }

        if (NeoConfig.renderCountDeltas && len > 0) {
            me.countDeltasPer250ms += len
        }

        for (; i < len; i++) {
            me[deltas[i].action || 'updateNode'](deltas[i])
        }

        Neo.worker.Manager.sendMessage(data.origin || 'app', {
            action : 'reply',
            replyId: data.id,
            success: true
        })
    }
}

export default Neo.setupClass(DeltaUpdates);
